APPUNTI LABORATORIO SISTEMI OPERATIVI:
Ci sono 3 canali fondamentali:
    - standard input, canale 0, detto stdin
    - startdard output, canale 1, detto stdout
    - standard error, canale 2, detto stderr
# commenti

Redirezionamento:
    command < file.txt    invia l’input al comando (file.txt read-only)
    command <> file.txt   invia l’input al comando (file.txt read-write)
    source > target       redireziona source su target
    source >| target      si comporta come > ma forza la sovrascrittura anche se bloccata nelle configurazioni 
    source >> target      si comporta come > ma opera un append se la destinazione esiste
    source << target      here-document, consente all’utente di specificare un terminatore testuale, dopodiche accetta l’input fino alla ricezione di tale terminatore.
    source <<< target     here-string, consente di fornire input in maniera non interattiva.

Array:
    Definizione:  lista=("a" 1 "b" 2 "c" 3) separati da spazi!
    Output completo:  ${lista[@]}
    Accesso singolo:  ${lista[x]}
    Lista indici: ${!lista[@]}
    Dimensione:  ${#lista[@]}
    Set elemento: lista[x]=value
    Append:  lista+=(value)
    Sub array:  ${lista[@]:s:n} (from index s, length n)

$$ : contiene il PID del processo attuale (*)
$? : contiene il codice di ritorno dell’ultimo comando eseguito

Concatenazione comandi:
    comando1 ; comando2  concatenazione semplice: esecuzione in sequenza
    comando1 && comando2 concatenazione logica “and”: l’esecuzione procede solo se il comando precedente non fallisce (codice ritorno zero)
    comando1 || comando2 concatenazione logica “or”: l’esecuzione procede solo se il comando precedente fallisce (codice ritorno NON zero)
    comando1 | comando2 concatenazione con piping (prende l’output di un comando e lo passa in input al successivo)
    comando1 |& comando2 concatenazione sia stdout sia stderr

    Confronti logici: [[...]] (lascia spazio dopo i simboli)
    Interi:
        uguale a: -eq oppure ==
        diverso da: -ne oppure !=
        minore di: -lt oppure <
        maggiore di: -gt oppure >
    Stringhe:
        uguale a: =
        diverso da: !=
        monire di: \<
        maggiore di: \>
    Unari:
        è un file: -f
        esiste: -e
        è una cartella: -d

Streams: forniscono strumenti come la formattazione dei dati, bufferizzazione, ecc.
    FILE *fopen(const char* filename, const char* mode);
    Restituisce un FILE pointer (o NULL se errore) per gestire il filename nella modalità specificata da mode. Questa può essere:
        ● r: read 
        ● w: write or overwrite (create)
        ● r+: read and write
        ● w+: read and write. Create or overwrite
        ● a: write at (create)
        ● a+: read and write at (create)
    int fclose(FILE *stream);
    char fgetc(FILE *stream)     Restituisce un carattere dallo stream.
    char *fgets(char *str, int n, FILE *stream)     Restituisce una stringa da stream e la salva in str. Si ferma quando n-1 caratteri sono stati letti, una nuova linea (\n) è letta o la fine del file viene raggiunta. Inserisce anche il carattere di terminazione e, eventualmente, ‘\n’..
    int fscanf(FILE *stream, const char *format, ...)       Legge da stream dei dati, salvando ogni dato nelle variabile fornite (simile a printf) seguendo la stringa  format.
    int feof(FILE *stream)      Restituisce 1 se lo stream ha raggiunto la fine del file, zero altrimenti.
    int fputc(int char, FILE *stream)       Scrive un singolo carattere char su stream.
    int fputs(const char *str, FILE *stream)        Scrive una stringa str su stream senza includere il carattere null.
    int fprintf(FILE *stream, const char *format, ...)      Scrive il contenuto di alcune variabile su stream, seguendo la stringa format
    int fflush(FILE *stream)        Operazione che trascrive il file dallo stream
    void rewind(FILE *stream)       Consente inoltre di ripristinare la posizione della testina all’inizio del file. 

File descriptors: interfaccia di basso livello costituita dalle system call messe a disposizione dal kernel
    Il kernel gestisce l’accesso ai files attraverso due strutture dati: la tabella dei files 
    attivi e la tabella dei files aperti. La prima contiene una copia dell’i-node di ogni file 
    aperto (per efficienza), mentre la seconda contiene un elemento per ogni file aperto e 
    non ancora chiuso
    int open(const char *pathname, int flags[, mode_t mode]); flags: interi (ORed) che definiscono l’apertura del file. I più comuni:
        ● O_RDONLY, O_WRONLY, O_RDWR: ALMENO uno è obbligatorio.
        ● O_CREAT: crea il file se non esiste (con O_EXCL la chiamata fallisce se esiste)
        ● O_APPEND: apre il file in append-mode (auto lseek con ogni scrittura)
        ● O_TRUNC: cancella il contenuto del file (se usato con la modalità scrittura)
    int close(int fd);
    ssize_t read (int fd, void *buf, size_t count); Legge dal file e salva nel buffer buf fino a count bytes di dati dal file associato con il file descriptor fd.
    ssize_t write(int fd, const void *buf, size_t count); Scrive sul file associato al file descriptor fd fino a count bytes di dati dal buffer buf.
    off_t lseek(int fd, off_t offset, int whence); Riposiziona l’offset del file a seconda dell’argomento offset partendo da una certa posizione whence. SEEK_SET: inizio del file, SEEK_CUR: dalla posizione attuale, SEEK_END: dalla fine del file.

File interaction:
    int chown(const char *pathname, uid_t owner, gid_t group); change the owner and/or group of a file or directory
    int fchown(int fd, uid_t owner, gid_t group); used to change the permissions (i.e., read, write, execute) of files and directories
    int chmod(const char *pathname, mode_t mode);
    int fchmod(int fd, mode_t mode);
    int exec_ (...); _ può essere:
        ● 'l': accetta una lista di argomenti
        ● 'v': accetta un vettore, quindi un solo argomento di diversi argomenti
        ● 'p': usa la variabile d'ambiente PATH per cercare il binario
        ● 'e': usa un vettore di variabili d'ambiente (es. “name=value”)

System call: interfacce con cui i programmi accedono all’hardware
    int system(const char * string); : chiamare la shell
    time_t time( time_t *second ) : get time
    fork() : Il forking è la “generazione” di nuovi processi (uno alla volta) partendo da uno esistente
        -> ritorna un int che rappresenta 0 se è il figlio oppure è il padre
    pid_t getpid() : restituisce il PID (Process ID) del processo attivo
    pid_t getppid() : restituisce il PID del processo genitore
    pid_t wait (int *status) : attende il cambio di stato di un processo figlio QUALSIASI
    pid_t waitpid(pid_t pid, int *status, int options) : Consente un’attesa selettiva basata su dei parametri. pid può essere:
            ● -n  (aspetta un figlio qualsiasi nel gruppo |-n|) (prossime lezioni)
            ● -1  (aspetta un figlio qualsiasi)
            ● 0  (aspetta un figlio qualsiasi appartenente allo stesso gruppo)
            ● n  (aspetta il figlio con PID=n)
        options sono i seguenti parametri ORed:
            ● WNOHANG: ritorna immediatamente se nessun figlio è terminato → non si resta in attesa!
            ● WUNTRACED: ritorna anche se un figlio si è interrotto senza terminare.
            ● WCONTINUED: ritorna anche se un figlio ha ripreso l’esecuzione.
    ps : per ispezionare la lista dei processi attivi

Segnali: strumenti di comunicazione tra processi
    sighandler_t signal(int signum, sighandler_t handler);  imposta un nuovo signal handler handler per il segnale signum
    void myHandler(int signNUm) {...} signal(SIGINT,myHandler);  custom handler
    signal()  restituisce un riferimento all'handler che era precedentemente assegnato al segnale
    int kill(pid_t pid, int sig);  invia un segnale ad 1o+ processi
    unsigned int alarm(unsigned int seconds);  Genera un segnale SIGALRM per il processo corrente dopo un lasso di tempo specificato in secondi. Restituisce i secondi rimanenti all’alarm precedente.
    int pause();  mette in pausa il mondo intero
    
    Signal mask: contiene l'elenco dei segnali
        int sigemptyset(sigset_t *set); Svuota
        int sigfillset(sigset_t *set);  Riempie
        int sigaddset(sigset_t *set, int signo); Aggiunge singolo 
        int sigdelset(sigset_t *set, int signo); Rimuove singolo
        int sigismember(const sigset_t *set, int signo); Interpella
        int sigprocmask(int how, const sigset_t *restrict set, sigset_t *restrict oldset);
            ● how = SIG_BLOCK: i segnali in set sono aggiunti alla maschera;
            ● how = SIG_UNBLOCK: i segnali in set sono rimossi dalla maschera;
            ● how = SIG_SETMASK: set diventa la maschera
        int sigpending(sigset_t *set);  Verificare i pending signals
        int sigqueue(pid_t pid, int sig, const union sigval value); Invia un segnale sig al processo identificato da pid, con payload value

PER COMPILARE: gcc -DEVAL -static -02 -pipe -s nome.c -o nome

        Groups: processi vengono raggruppati
    int setpgid(pid_t pid, pid_t pgid); setta l'ID del gruppo (se pid=0 allora il processo diventa leader)
    pid_t getpgid(pid_t pid); prende l'ID del gruppo
Piping: connette output di un comando all'input di un altro comando (processi eseguiti in concorrenza)
    int pipe(int pipefd[2]);   creazione di una pipa con un vettore che contiene i file descriptors
    int read(int fd[0],char * data, int num);   restituisce il numero di bytes effetivamente letti
    int write(int fd[1],char * data, int num);  restituisce il numero di bytes effetivamente scritti
    int close(fd[0]);   Close read side

Message Queue: Una  coda  di  messaggi,  message  queue,  è  una  lista  concatenata  memorizzata all’interno del kernel ed identificata con un ID (un intero positivo univoco), chiamato queue identifier. Questo ID viene condiviso tra i processi interessati, e viene generato attraverso una chiave univoca
    key_t ftok(const char *path, int id); restituisce una chiave univoca
    int msgget(key_t key, int msgflg)
        key_t queueKey = ftok("/tmp/unique", 1);; 
        int queueId = msgget(queueKey, 0777 | O_CREAT | IPC_EXCL); restituisce l’identificativo di una coda basandosi sulla chiave “key” e sui flags
    int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg); aggiunge una copia del messaggio puntato da msgp, con un payload di dimensione msgsz,  alla  coda  identificata  da  msquid.
    ssize_t msgrcv(int msqid,void *msgp,size_t msgsz,long msgtyp,int msgflg);
	A seconda di msgtyp viene recuperato il messaggio:
	● msgtyp = 0: primo messaggio della coda (FIFO)
	● msgtyp > 0: primo messaggio di tipo msgtyp, o primo messaggio di 	tipo diverso da msgtyp se MSG_EXCEPT è impostato come flag
	● msgtyp < 0: primo messaggio il cui tipo T è min(T ≤ |msgtyp|)

        Rimuove  un  messaggio  dalla  coda  msqid  e  lo  salva  nel  buffer  msgp.  msgsz 
        specifica la lunghezza massima del payload del messaggio (per esempio mtext della 
        struttura  msgp).  Se  il  payload  ha  una  lunghezza  maggiore  e  msgflg  è 
        MSG_NOERROR allora il payload viene troncato (viene persa la parte in eccesso), se 
        MSG_NOERROR non è specificato allora il payload non viene eliminato e la chiamata 
        fallisce.
        Se  non  sono  presenti  messaggi,  la  chiamata  si  blocca  in  loro  attesa.  Il  flag 
        IPC_NOWAIT fa fallire la syscall se non sono presenti messaggi.

    int msgctl(int msqid, int cmd, struct msqid_ds *buf); modifica la coda identificata da msqid secondo i comandi cmd, riempiendo buf con informazioni 	sulla  coda
        cmd può essere:
            ● IPC_STAT: recupera informazioni da kernel 
            ● IPC_SET: imposta alcuni parametri a seconda di buf
            ● IPC_RMID: rimuove immediatamente la coda
            ● IPC_INFO: recupera informazioni generali sui limiti delle code nel sistema
            ● MSG_INFO: come IPC_INFO ma con informazioni differenti
            ● MSG_STAT: come IPC_STAT ma con informazioni differenti
        struct msqid_ds {
            struct ipc_perm msg_perm;   /* Ownership and permissions */
            time_t msg_stime;  /* Time of last msgsnd(2) */
            time_t msg_rtime;  /* Time of last msgrcv(2) */
            time_t msg_ctime; //Time of creation or last modification by msgctl
            unsigned long   msg_cbytes; /* # of bytes in queue */
            msgqnum_t       msg_qnum;   /* # of messages in queue */
            msglen_t        msg_qbytes; /* Maximum # of bytes in queue */
            pid_t           msg_lspid;  /* PID of last msgsnd(2) */
            pid_t           msg_lrpid;  /* PID of last msgrcv(2) */
            };
        struct ipc_perm {
            key_t __key;    /* Key supplied to msgget(2) */
            uid_t uid;      /* Effective UID of owner */
            gid_t gid;      /* Effective GID of owner */
            uid_t cuid;     /* Effective UID of creator */
            gid_t cgid;     /* Effective GID of creator */
            unsigned short mode;    /* Permissions */
            unsigned short __seq;   /* Sequence number */
            };

Threads: singole sequenze di esecuzione all'interno di un processo
    int pthread_create(
        pthread_t *restrict thread, /* Thread ID */
        const pthread_attr_t *restrict attr, /* Attributes */
        void *(*start_routine)(void *), /* Function to be executed */
        void *restrict arg /* Parameters to above function */
        );  per creare un 
        pthread_create(&t_id1, NULL, my_fun, (void *)&t_id1);
    void pthread_exit(void * retval); terminazione di un thread
    int pthread_cancel(pthread_t thread); invia una richiesta di cancellazione al thread specificato
    int pthread_setcancelstate(int state, int *oldstate); cancel state di un thread definisce se il thread deve terminare o meno quando una richiesta di cancellazione viene ricevuta. 
        PTHREAD_CANCEL_ENABLE
        PTHREAD_CANCEL_DISABLE aspetta fino a quando diventa ENABLE
    int pthread_setcanceltype(int type, int *oldtype); cancel type di un thread definisce come il thread deve terminare
        PTHREAD_CANCEL_DEFERRED aspetta l'esecuzione di un cancellation point
        PTHREAD_CANCEL_ASYNCHRONOUS terminazione avviene appena la richiesta viene ricevuta
    int pthread_join(pthread_t thread, void ** retval); ritorna quando thread termina e valore salvato in retval
    int pthread_detach(pthread_t thread); cambia il detach state da joinable a detached (non è invertibile!)
    int pthread_kill(pthread_t thread, int sig); invio segnale ad un thread specifico
	
	Il cancel state di un thread definisce se il thread deve terminare o meno 	quando una richiesta di cancellazione viene ricevuta.
	int pthread_setcancelstate(int state, int *oldstate);
	'oldstate' viene riempito con lo stato precedente, state può contenere 	una delle seguenti macro:
	● PTHREAD_CANCEL_ENABLE: ogni richiesta di cancellazione viene gestita a 		seconda del type del thread. Questa è la modalità default.
	● PTHREAD_CANCEL_DISABLE: ogni richiesta di cancellazione aspetterà fino 		a che il cancel state del thread non diventa 				PTHREAD_CANCEL_ENABLE

	Il cancel type di un thread definisce come il thread deve terminare. 
	int pthread_setcanceltype(int type, int *oldtype);
	oldtype viene riempito con il type precedente, type può contenere una 	delle seguenti macro:
	● PTHREAD_CANCEL_DEFERRED: la terminazione aspetta l’esecuzione di un
		cancellation point. Questa è la modalità default.
	● PTHREAD_CANCEL_ASYNCHRONOUS: la terminazione avviene appena la 			richiesta viene ricevuta

	I thread joinable non rilasciano le loro risorse alla terminazione,
	ma quando un thread li aspetta (salvando lo stato di uscita, come i 	sottoprocessi), o alla terminazione del processo stesso. Al contrario, i 	thread detached rilasciano le loro risorse immediatamente al termine, ma 	non permettono ad altri processi di aspettarli.
	int pthread_detach(pthread_t thread);

	Quando viene inviato un segnale ad un processo non si può sapere quale 	thread andrà a gestirlo. Per evitare problemi o comportamenti inattesi, è 	importante gestire correttamente le maschere dei segnali dei singoli 	thread con pthread_attr_setsigmask_np(pthread_attr_t *attr,const 	sigset_t *sigmask) la quale usa *sigmask per impostare la maschera dei 	segnali 	nella struttura *attr.

	Semafori Mutex:
        int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restrict attr);
        int pthread_mutex_destroy(pthread_mutex_t *mutex);
        int pthread_mutex_lock(pthread_mutex_t *mutex);
        int pthread_mutex_unlock(pthread_mutex_t *mutex);